'use strict';

var util = require('util');
var colors = require('colors');

var curLogLevel = 'DEBUG';

/**
 * Enum for log levels.
 * @enum {number}
 */
var LogLevel = {
    SUPPRESS: 0,
    ERROR: 1,
    WARN: 2,
    INFO: 3,
    DEBUG: 4
};

/**
 * Enum for log colors.
 * @enum {string}
 */
var LogColor = {
    SUPPRESS: 'white',
    ERROR: 'red',
    WARN: 'magenta',
    INFO: 'cyan',
    DEBUG: 'yellow'
};

/*global Levels*/
var Logger = {
    LogLevel: function LogLevel() {
        return Levels;
    }
};

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
    var _loop = function _loop() {
        var level = _step.value;

        if (LogLevel[level] > 0) {
            Logger[level.toLowerCase()] = function () {
                // Write log only if logging level in the config is above the
                // threshold for the current log level.
                if (LogLevel[curLogLevel] >= LogLevel[level]) {
                    var logDate = new Date().toLocaleString().replace(/T/, ' ').replace(/\..+/, '');
                    logDate = '[' + logDate + ']';
                    var logMessage = util.format.apply(util.format, arguments);

                    var errStack = new Error().stack;
                    var stacklist = errStack.split('\n')[2].split('at ')[1];
                    var regEx = /\(([^)]+)\)/;
                    var parsedStack = regEx.exec(stacklist) ? regEx.exec(stacklist)[1] : stacklist;
                    var stackParts = parsedStack.split(':');
                    var file = stackParts[0].split('/')[stackParts[0].split('/').length - 1];
                    var line = stackParts[1];

                    var logTag = colors.blue('[') + colors[LogColor[level]].bold(level) + colors.blue(']');
                    var log = '';
                    if (level !== 'INFO') {
                        log = '' + logTag + logDate + '[' + file + ':' + line + '] ' + logMessage;
                    } else {
                        log = '' + logTag + logDate + ' ' + logMessage;
                    }
                    console.log(log);
                }
            };
        }
    };

    for (var _iterator = Object.keys(LogLevel)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
    }
} catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
} finally {
    try {
        if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
        }
    } finally {
        if (_didIteratorError) {
            throw _iteratorError;
        }
    }
}

Logger.inspects = function () {
    if (LogLevel[curLogLevel] === LogLevel.DEBUG) {
        var errStack = new Error().stack;
        var stacklist = errStack.split('\n')[2].split('at ')[1];
        var regEx = /\(([^)]+)\)/;
        var parsedStack = regEx.exec(stacklist) ? regEx.exec(stacklist)[1] : stacklist;
        var stackParts = parsedStack.split(':');
        var file = stackParts[0];
        var line = stackParts[1];
        var tag = colors.blue('[') + colors.green('INSPECTS') + colors.blue(']');
        var logMessage = tag + '[' + file + ':' + line + ']';

        for (var i = 0; i < arguments.length; i += 1) {
            logMessage += '\n\n ' + colors.blue(i.toString()) + ' \n ' + util.inspect(arguments[i], {
                colors: true,
                depth: null
            });
        }

        console.log(logMessage);
    }
};

Logger.inspect = function () {
    if (LogLevel[curLogLevel] === LogLevel.DEBUG) {
        var errStack = new Error().stack;
        var stacklist = errStack.split('\n')[2].split('at ')[1];
        var regEx = /\(([^)]+)\)/;
        var parsedStack = regEx.exec(stacklist) ? regEx.exec(stacklist)[1] : stacklist;
        var stackParts = parsedStack.split(':');
        var file = stackParts[0];
        var line = stackParts[1];
        var tag = colors.blue('[') + colors.green('INSPECT') + colors.blue(']');
        var logMessage = tag + '[' + file + ':' + line + ']';

        logMessage += '\n\n ' + util.inspect(arguments[0], {
            colors: true,
            depth: arguments[1]
        });

        console.log(logMessage);
    }
};

module.exports = Logger;