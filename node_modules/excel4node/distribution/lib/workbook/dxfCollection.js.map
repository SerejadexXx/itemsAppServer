{"version":3,"sources":["../../../source/lib/workbook/dxfCollection.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,IAAI,QAAQ,QAAR,CAAJ;AACN,IAAM,QAAQ,QAAQ,UAAR,CAAR;AACN,IAAM,OAAO,QAAQ,MAAR,CAAP;;IAEA;;;AACF,aADE,OACF,CAAY,KAAZ,EAAmB,EAAnB,EAAuB;8BADrB,SACqB;;AACnB,aAAK,EAAL,GAAU,EAAV,CADmB;AAEnB,aAAK,KAAL,GAAa,KAAb,CAFmB;AAGnB,aAAK,EAAL,CAHmB;KAAvB;;iBADE;;oCAUU,KAAK;AACb,iBAAK,KAAL,CAAW,cAAX,CAA0B,GAA1B,EADa;;;;4BAJL;AACR,mBAAO,KAAK,EAAL,CADC;;;;WANV;;;IAeA;;;AACF,aADE,aACF,CAAY,EAAZ,EAAgB;8BADd,eACc;;AACZ,aAAK,EAAL,GAAU,EAAV,CADY;AAEZ,aAAK,KAAL,GAAa,EAAb,CAFY;KAAhB;;iBADE;;4BAME,OAAO;AACP,gBAAI,EAAE,iBAAiB,KAAjB,CAAF,EAA2B;AAC3B,wBAAQ,KAAK,EAAL,CAAQ,KAAR,CAAc,KAAd,CAAR,CAD2B;aAA/B;;AAIA,gBAAI,oBAAJ,CALO;AAMP,iBAAK,KAAL,CAAW,OAAX,CAAmB,UAAC,IAAD,EAAU;AACzB,oBAAI,EAAE,MAAF,CAAS,KAAK,KAAL,CAAW,QAAX,EAAT,EAAgC,MAAM,QAAN,EAAhC,CAAJ,EAAuD;AACnD,2BAAO,WAAW,IAAX,CAD4C;iBAAvD;aADe,CAAnB,CANO;AAWP,gBAAI,CAAC,QAAD,EAAW;AACX,2BAAW,IAAI,OAAJ,CAAY,KAAZ,EAAmB,KAAK,EAAL,CAA9B,CADW;AAEX,qBAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAFW;AAGX,yBAAS,EAAT,GAAc,KAAK,KAAL,CAAW,MAAX,GAAoB,CAApB,CAHH;aAAf;AAKA,mBAAO,QAAP,CAhBO;;;;oCAuBC,KAAK;AACb,gBAAI,SAAS,IACR,GADQ,CACJ,MADI,EAER,GAFQ,CAEJ,OAFI,EAEK,KAAK,MAAL,CAFd,CADS;;AAKb,iBAAK,KAAL,CAAW,OAAX,CAAmB,UAAC,IAAD,EAAU;AACzB,qBAAK,WAAL,CAAiB,MAAjB,EADyB;aAAV,CAAnB,CALa;;;;4BAJJ;AACT,mBAAO,KAAK,KAAL,CAAW,MAAX,CADE;;;;WAzBX;;;AAwCN,OAAO,OAAP,GAAiB,aAAjB","file":"dxfCollection.js","sourcesContent":["const _ = require('lodash');\nconst Style = require('../style');\nconst util = require('util');\n\nclass DXFItem { // ยง18.8.14 dxf (Formatting)\n    constructor(style, wb) {\n        this.wb = wb;\n        this.style = style;\n        this.id;\n    }\n    get dxfId() {\n        return this.id;\n    }\n\n    addToXMLele(ele) {\n        this.style.addDXFtoXMLele(ele);\n    }\n}\n\nclass DXFCollection { // ยง18.8.15 dxfs (Formats)\n    constructor(wb) {\n        this.wb = wb;\n        this.items = [];\n    }\n\n    add(style) {\n        if (!(style instanceof Style)) {\n            style = this.wb.Style(style);\n        }\n\n        let thisItem;\n        this.items.forEach((item) => {\n            if (_.equals(item.style.toObject(), style.toObject())) {\n                return thisItem = item;\n            }\n        });\n        if (!thisItem) {\n            thisItem = new DXFItem(style, this.wb);\n            this.items.push(thisItem);\n            thisItem.id = this.items.length - 1;\n        }\n        return thisItem;\n    }\n\n    get length() {\n        return this.items.length;\n    }\n\n    addToXMLele(ele) {\n        let dxfXML = ele\n            .ele('dxfs')\n            .att('count', this.length);\n\n        this.items.forEach((item) => {\n            item.addToXMLele(dxfXML);\n        });\n    }\n}\n\nmodule.exports = DXFCollection;"]}