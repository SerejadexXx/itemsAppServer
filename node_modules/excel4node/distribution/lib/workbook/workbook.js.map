{"version":3,"sources":["../../../source/lib/workbook/workbook.js"],"names":[],"mappings":"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","file":"workbook.js","sourcesContent":["const _ = require('lodash');\nconst fs = require('fs');\nconst utils = require('../utils.js');\nconst Worksheet = require('../worksheet');\nconst Style = require('../style');\nconst Border = require('../style/classes/border.js');\nconst Fill = require('../style/classes/fill.js');\nconst DXFCollection = require('./dxfCollection.js');\nconst MediaCollection = require('./mediaCollection.js');\nconst DefinedNameCollection = require('../classes/definedNameCollection.js');\nconst SlothLogger = require('sloth-logger');\nconst types = require('../types/index.js');\nconst builder = require('./builder.js');\nconst http = require('http');\n\n\n/* Available options for Workbook\n{\n    jszip : {\n        compression : 'DEFLATE'\n    },\n    defaultFont : {\n        size : 12,\n        family : 'Calibri',\n        color : 'FFFFFFFF'\n    }\n}\n*/\n// Default Options for Workbook\nlet workbookDefaultOpts = {\n    jszip: {\n        compression: 'DEFLATE'\n    },\n    defaultFont: {\n        'color': 'FF000000',\n        'name': 'Calibri',\n        'size': 12,\n        'family': 'roman'\n    },\n    dateFormat: 'm/d/yy'\n};\n\n\nclass Workbook {\n\n    /**\n     * @class Workbook\n     * @param {Object} opts Workbook settings\n     * @param {Object} opts.jszip\n     * @param {String} opts.jszip.compression JSZip compression type. defaults to 'DEFLATE'\n     * @param {Object} opts.defaultFont\n     * @param {String} opts.defaultFont.color HEX value of default font color. defaults to #000000\n     * @param {String} opts.defaultFont.name Font name. defaults to Calibri\n     * @param {Number} opts.defaultFont.size Font size. defaults to 12\n     * @param {String} opts.defaultFont.family Font family. defaults to roman\n     * @param {String} opts.dataFormat Specifies the format for dates in the Workbook. defaults to 'm/d/yy'\n     * @returns {Workbook}\n     */\n    constructor(opts) {\n        opts = opts ? opts : {};\n        \n        this.logger = new SlothLogger.Logger({\n            logLevel: Number.isNaN(parseInt(opts.logLevel)) ? 0 : parseInt(opts.logLevel)\n        });\n\n        this.opts = _.merge({}, workbookDefaultOpts, opts);\n\n        this.sheets = [];\n        this.sharedStrings = [];\n        this.styles = [];\n        this.dxfCollection = new DXFCollection(this);\n        this.mediaCollection = new MediaCollection();\n        this.definedNameCollection = new DefinedNameCollection();\n        this.styleData = {\n            'numFmts': [],\n            'fonts': [],\n            'fills': [new Fill({ type: 'pattern', patternType: 'none' }), new Fill({ type: 'pattern', patternType: 'gray125' })],\n            'borders': [new Border()],\n            'cellXfs': [\n                {\n                    'borderId': null,\n                    'fillId': null,\n                    'fontId': 0,\n                    'numFmtId': null\n                }\n            ]\n        };\n\n        // Set Default Font and Style\n        this.createStyle({ font: this.opts.defaultFont });\n\n    }\n\n    /**\n     * setSelectedTab\n     * @param {Number} tab number of sheet that should be displayed when workbook opens. tabs are indexed starting with 1\n     **/\n    setSelectedTab(id) {\n        this.sheets.forEach((s) => {\n            if (s.sheetId === id) {\n                s.opts.sheetView.tabSelected = 1;\n            } else {\n                s.opts.sheetView.tabSelected = 0;\n            }\n        });\n    }\n\n    /**\n     * Generate .xlsx file. \n     * @param {String} fileName Name of Excel workbook with .xslx extension\n     * @param {http.response | callback} http response object or callback function (optional). \n     * If http response object is given, file is written to http response. Useful for web applications.\n     * If callback is given, callback called with (err, fs.Stats) passed\n     */\n    write(fileName, handler) {\n\n        builder.writeToBuffer(this)\n        .then((buffer) => {\n            switch (typeof handler) {\n                // handler passed as http response object. \n\n            case 'object':\n                if (handler instanceof http.ServerResponse) {\n                    handler.writeHead(200, {\n                        'Content-Length': buffer.length,\n                        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n                        'Content-Disposition': 'attachment; filename=\"' + fileName + '\"'\n                    });\n                    handler.end(buffer);\n                } else {\n                    throw new TypeError('Unknown object sent to write function.');\n                }\n                break;\n\n            // handler passed as callback function\n            case 'function':\n                fs.writeFile(fileName, buffer, function (err) {\n                    if (err) {\n                        handler(err);\n                    } else {\n                        fs.stat(fileName, handler);\n                    }\n                });\n                break;\n\n            // no handler passed, write file to FS.\n            default:\n                \n                fs.writeFile(fileName, buffer, function (err) {\n                    if (err) { \n                        throw err; \n                    }\n                });\n                break;\n            }\n        })\n        .catch((e) => {\n            console.error(e.stack);\n        });\n    }\n\n    /**\n     * Add a worksheet to the Workbook \n     * @param {String} name Name of the Worksheet\n     * @param {Object} opts Options for Worksheet. See Worksheet class definition\n     * @returns {Worksheet}\n     */\n    addWorksheet(name, opts) {\n        let newLength = this.sheets.push(new Worksheet(this, name, opts));\n        return this.sheets[newLength - 1];\n    }\n\n    /** \n     * Add a Style to the Workbook\n     * @param {Object} opts Options for the style. See Style class definition\n     * @returns {Style}\n     */\n    createStyle(opts) {\n        let thisStyle;\n        let checkCount = 0;\n        while (thisStyle === undefined && checkCount < this.styles.length) {\n            if (_.isEqual(this.styles[checkCount].toObject(), opts)) {\n                thisStyle = this.styles[checkCount];\n            }\n            checkCount++;\n        }\n        if (thisStyle === undefined) {\n            thisStyle = new Style(this, opts);\n            let count = this.styles.push(thisStyle);\n            this.styles[count - 1].ids.cellXfs = count - 1;\n            return this.styles[count - 1];\n        } else {\n            return thisStyle;\n        }\n    }\n\n    /**\n     * Gets the index of a string from the shared string array if exists and adds the string if it does not and returns the new index\n     * @param {String} val Text of string\n     * @returns {Number} index of the string in the shared strings array\n     */\n    getStringIndex(val) {\n        if (this.sharedStrings.indexOf(val) < 0) {\n            this.sharedStrings.push(val);\n        }\n        return this.sharedStrings.indexOf(val);\n    }\n}\n\nmodule.exports = Workbook;"]}