{"version":3,"sources":["../../../source/lib/style/style.js"],"names":[],"mappings":"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","file":"style.js","sourcesContent":["const utils = require('../utils.js');\nconst _ = require('lodash');\n\nconst Alignment = require('./classes/alignment.js');\nconst Border = require('./classes/border.js');\nconst Fill = require('./classes/fill.js');\nconst Font = require('./classes/font.js');\nconst NumberFormat = require('./classes/numberFormat.js');\n\nlet _getFontId = (wb, font) => {\n\n    let thisFont = new Font(font);\n\n    let fontId;\n    wb.styleData.fonts.forEach((f, i) => {\n        if (_.isEqual(thisFont.toObject(), f.toObject())) {\n            fontId = i;\n        }\n    });\n    if (fontId === undefined) {\n        let count = wb.styleData.fonts.push(thisFont);\n        fontId = count - 1;\n    }\n\n    return fontId;\n};\n\nlet _getFillId = (wb, fill) => {\n    if (fill === undefined) {\n        return null;\n    }\n\n    let thisFill = new Fill(fill);\n\n    let fillId;\n    wb.styleData.fills.forEach((f, i) => {\n        if (_.isEqual(thisFill.toObject(), f.toObject())) {\n            fillId = i;\n        }\n    });\n    if (fillId === undefined) {\n        let count = wb.styleData.fills.push(thisFill);\n        fillId = count - 1;\n    }\n\n    return fillId;\n};\n\nlet _getBorderId = (wb, border) => {\n    if (border === undefined) {\n        return null;\n    }\n\n    let thisBorder = new Border(border);\n    let borderId;\n    wb.styleData.borders.forEach((b, i) => {\n        if (_.isEqual(b.toObject(), thisBorder.toObject())) {\n            borderId = i;\n        }\n    });\n\n    if (borderId === undefined) {\n        let count = wb.styleData.borders.push(thisBorder);\n        borderId = count - 1;\n    }\n\n    return borderId;\n};\n\nlet _getNumFmt = (wb, val) => {\n    let fmt;\n    wb.styleData.numFmts.forEach((f) => {\n        if (_.isEqual(f.formatCode, val)) {\n            fmt = f;\n        }\n    });\n\n    if (fmt === undefined) {\n        let fmtId = wb.styleData.numFmts.length + 164;\n        fmt = new NumberFormat(val);\n        fmt.numFmtId = fmtId;\n        wb.styleData.numFmts.push(fmt);\n    }\n\n    return fmt;\n};\n\n\n/*\n    Style Opts\n    {\n        alignment: { // §18.8.1\n            horizontal: ['center', 'centerContinuous', 'distributed', 'fill', 'general', 'justify', 'left', 'right'],\n            indent: integer, // Number of spaces to indent = indent value * 3\n            justifyLastLine: boolean,\n            readingOrder: ['contextDependent', 'leftToRight', 'rightToLeft'], \n            relativeIndent: integer, // number of additional spaces to indent\n            shrinkToFit: boolean,\n            textRotation: integer, // number of degrees to rotate text counter-clockwise\n            vertical: ['bottom', 'center', 'distributed', 'justify', 'top'],\n            wrapText: boolean\n        },\n        font: { // §18.8.22\n            bold: boolean,\n            charset: integer,\n            color: string,\n            condense: boolean,\n            extend: boolean,\n            family: string,\n            italics: boolean,\n            name: string,\n            outline: boolean,\n            scheme: string, // §18.18.33 ST_FontScheme (Font scheme Styles)\n            shadow: boolean,\n            strike: boolean,\n            size: integer,\n            underline: boolean,\n            vertAlign: string // §22.9.2.17 ST_VerticalAlignRun (Vertical Positioning Location)\n        },\n        border: { // §18.8.4 border (Border)\n            left: {\n                style: string,\n                color: string\n            },\n            right: {\n                style: string,\n                color: string\n            },\n            top: {\n                style: string,\n                color: string\n            },\n            bottom: {\n                style: string,\n                color: string\n            },\n            diagonal: {\n                style: string,\n                color: string\n            },\n            diagonalDown: boolean,\n            diagonalUp: boolean,\n            outline: boolean\n        },\n        fill: { // §18.8.20 fill (Fill)\n            type: 'pattern',\n            patternType: 'solid',\n            color: 'Yellow'\n        },\n        numberFormat: integer or string // §18.8.30 numFmt (Number Format)\n    }\n*/\nclass Style {\n    constructor(wb, opts) {\n        /**\n         * Excel Style object\n         * @class Style\n         * @desc Style object for formatting Excel Cells\n         * @param {Workbook} wb Excel Workbook object\n         * @param {Object} opts Options for style\n         * @param {Object} opts.alignment Options for creating an Alignment instance\n         * @param {Object} opts.font Options for creating a Font instance\n         * @param {Object} opts.border Options for creating a Border instance\n         * @param {Object} opts.fill Options for creating a Fill instance\n         * @param {String} opts.numberFormat\n         * @property {Alignment} alignment Alignment instance associated with Style\n         * @property {Border} border Border instance associated with Style\n         * @property {Number} borderId ID of Border instance in the Workbook\n         * @property {Fill} fill Fill instance associated with Style\n         * @property {Number} fillId ID of Fill instance in the Workbook\n         * @property {Font} font Font instance associated with Style\n         * @property {Number} fontId ID of Font instance in the Workbook\n         * @property {String} numberFormat String represenation of the way a number should be formatted\n         * @property {Number} xf XF id of the Style in the Workbook\n         * @returns {Style} \n         */\n        opts = opts ? opts : {};\n\n        if (opts.alignment !== undefined) {\n            this.alignment = new Alignment(opts.alignment);\n        }\n\n        if (opts.border !== undefined) {  \n            this.borderId = _getBorderId(wb, opts.border); // attribute 0 based index\n            this.border = wb.styleData.borders[this.borderId];  \n        }\n        if (opts.fill !== undefined) {  \n            this.fillId = _getFillId(wb, opts.fill); // attribute 0 based index\n            this.fill = wb.styleData.fills[this.fillId];\n        }\n\n        if (opts.font !== undefined) {  \n            this.fontId = _getFontId(wb, opts.font); // attribute 0 based index\n            this.font = wb.styleData.fonts[this.fontId];\n        }\n\n        if (opts.numberFormat !== undefined) {  \n            if (typeof opts.numberFormat === 'number' && opts.numberFormat <= 164) {\n                this.numFmtId = opts.numberFormat;\n            } else if (typeof opts.numberFormat === 'string') {\n                this.numFmt = _getNumFmt(wb, opts.numberFormat);\n            }\n        }\n\n        if (opts.pivotButton !== undefined) {\n            this.pivotButton = null; // attribute boolean\n        }\n\n        if (opts.quotePrefix !== undefined) {\n            this.quotePrefix = null; // attribute boolean\n        }\n\n        this.ids = {};\n    }\n\n    get xf() {\n        let thisXF = {};\n\n        if (typeof this.fontId === 'number') {\n            thisXF.applyFont = 1;\n            thisXF.fontId = this.fontId;\n        }\n\n        if (typeof this.fillId === 'number') {\n            thisXF.applyFill = 1;\n            thisXF.fillId = this.fillId;\n        }\n\n        if (typeof this.borderId === 'number') {\n            thisXF.applyBorder = 1;\n            thisXF.borderId = this.borderId;\n        }\n\n        if (typeof this.numFmtId === 'number') {\n            thisXF.applyNumberFormat = 1;\n            thisXF.numFmtId = this.numFmtId;\n        } else if (this.numFmt !== undefined && this.numFmt !== null) {\n            thisXF.applyNumberFormat = 1;\n            thisXF.numFmtId = this.numFmt.numFmtId;\n        }\n\n        if (this.alignment instanceof Alignment) {\n            thisXF.applyAlignment = 1;\n            thisXF.alignment = this.alignment;\n        }\n\n        return thisXF;\n    }\n\n\n    /** \n     * @func Style.toObject\n     * @desc Converts the Style instance to a javascript object\n     * @returns {Object}\n     */\n    toObject() {\n        let obj = {};\n\n        if (typeof this.fontId === 'number') {\n            obj.font = this.font.toObject();\n        }\n\n        if (typeof this.fillId === 'number') {\n            obj.fill = this.fill.toObject();\n        }\n\n        if (typeof this.borderId === 'number') {\n            obj.border = this.border.toObject();\n        }\n\n        if (typeof this.numFmtId === 'number' && this.numFmtId < 164) {\n            obj.numberFormat = this.numFmtId;\n        } else if (this.numFmt !== undefined && this.numFmt !== null) {\n            obj.numberFormat = this.numFmt.formatCode;\n        }\n\n        if (this.alignment instanceof Alignment) {\n            obj.alignment = this.alignment.toObject();\n        }\n\n        if (this.pivotButton !== undefined) {\n            obj.pivotButton = this.pivotButton;\n        }\n\n        if (this.quotePrefix !== undefined) {\n            obj.quotePrefix = this.quotePrefix;\n        }\n\n        return obj;   \n    }\n\n    /**\n     * @alias Style.addToXMLele\n     * @desc When generating Workbook output, attaches style to the styles xml file\n     * @func Style.addToXMLele\n     * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n     */\n    addXFtoXMLele(ele) {\n        let thisEle = ele.ele('xf');\n        let thisXF = this.xf;\n        Object.keys(thisXF).forEach((a) => {\n            if (a === 'alignment') {\n                thisXF[a].addToXMLele(thisEle);\n            } else {\n                thisEle.att(a, thisXF[a]);\n            }\n        });        \n    }\n\n    /**\n     * @alias Style.addDXFtoXMLele\n     * @desc When generating Workbook output, attaches style to the styles xml file as a dxf for use with conditional formatting rules\n     * @func Style.addDXFtoXMLele\n     * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n     */\n    addDXFtoXMLele(ele) {\n        let thisEle = ele.ele('dxf');\n\n        if (this.font instanceof Font) {\n            this.font.addToXMLele(thisEle);\n        }\n\n        if (this.numFmt instanceof NumberFormat) {\n            this.numFmt.addToXMLele(thisEle);\n        }\n\n        if (this.fill instanceof Fill) {\n            this.fill.addToXMLele(thisEle);\n        }\n\n        if (this.alignment instanceof Alignment) {\n            this.alignment.addToXMLele(thisEle);\n        }\n\n        if (this.border instanceof Border) {\n            this.border.addToXMLele(thisEle);\n        }\n    }\n}\n\nmodule.exports = Style;"]}