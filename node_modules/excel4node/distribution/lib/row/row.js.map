{"version":3,"sources":["../../../source/lib/row/row.js"],"names":[],"mappings":"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","file":"row.js","sourcesContent":["const utils = require('../utils.js');\nconst _ = require('lodash');\n\nclass Row {\n    /**\n     * Element representing an Excel Row\n     * @param {Number} row Row of cell\n     * @param {Worksheet} Worksheet that contains row\n     * @property {Worksheet} ws Worksheet that contains the specified Row\n     * @property {Array.String} cellRefs Array of excel cell references\n     * @property {Boolean} collapsed States whether row is collapsed when grouped\n     * @property {Boolean} customFormat States whether the row has a custom format\n     * @property {Boolean} customHeight States whether the row's height is different than default\n     * @property {Boolean} hidden States whether the row is hidden\n     * @property {Number} ht Height of the row (internal property)\n     * @property {Number} outlineLevel Grouping level of row\n     * @property {Number} r Row index\n     * @property {Number} s Style index\n     * @property {Boolean} thickBot States whether row has a thick bottom border\n     * @property {Boolean} thickTop States whether row has a thick top border\n     * @property {Number} height Height of row\n     * @property {String} spans String representation of excel cell range i.e. A1:A10\n     * @property {Number} firstColumn Index of the first column of the row containg data\n     * @property {String} firstColumnAlpha Alpha representation of the first column of the row containing data\n     * @property {Number} lastColumn Index of the last column of the row cotaining data\n     * @property {String} lastColumnAlpha Alpha representation of the last column of the row containing data\n     */\n    constructor(row, ws) {\n        this.ws = ws;\n        this.cellRefs = [];\n        this.collapsed = null;\n        this.customFormat = null;\n        this.customHeight = null;\n        this.hidden = null;\n        this.ht = null;\n        this.outlineLevel = null;\n        this.r = row;\n        this.s = null;\n        this.thickBot = null;\n        this.thickTop = null;\n    }\n\n    set height(h) {\n        if (typeof h === 'number') {\n            this.ht = h;\n            this.customHeight = true;\n        } else {\n            throw new TypeError('Row height must be a number');\n        }\n        return this.ht;\n    }\n    get height() {\n        return this.ht;\n    }\n\n    /**\n     * @alias Row.setHeight\n     * @desc Sets the height of a row\n     * @func Row.setHeight\n     * @param {Number} val New Height of row\n     * @returns {Row} Excel Row with attached methods\n     */\n    setHeight(h) {\n        if (typeof h === 'number') {\n            this.ht = h;\n            this.customHeight = true;\n        } else {\n            throw new TypeError('Row height must be a number');\n        }\n        return this;\n    }\n\n    get spans() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return `${utils.getExcelRowCol(this.cellRefs[0]).row}:${utils.getExcelRowCol(this.cellRefs[this.cellRefs.length - 1]).row}`;\n        } else {\n            return `${this.r}:${this.r}`;\n        }\n    }\n\n    get firstColumn() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return utils.getExcelRowCol(this.cellRefs[0]).col;\n        } else {\n            return 1;\n        }\n    }\n\n    get firstColumnAlpha() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return utils.getExcelAlpha(utils.getExcelRowCol(this.cellRefs[0]).col);\n        } else {\n            return 'A';\n        }  \n    }\n\n    get lastColumn() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return utils.getExcelRowCol(this.cellRefs[this.cellRefs.length - 1]).col;\n        } else {\n            return 1;\n        }\n    }\n\n    get lastColumnAlpha() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return utils.getExcelAlpha(utils.getExcelRowCol(this.cellRefs[this.cellRefs.length - 1]).col);\n        } else {\n            return 'A';\n        }  \n    }\n\n    /**\n     * @alias Row.filter\n     * @desc Add autofilter dropdowns to the items of the row\n     * @func Row.filter\n     * @param {Object} opts Object containing options for the fitler. \n     * @param {Number} opts.lastRow Last row in which the filter show effect filtered results (optional)\n     * @param {Number} opts.startCol First column that a filter dropdown should be added (optional)\n     * @param {Number} opts.lastCol Last column that a filter dropdown should be added (optional)\n     * @param {Array.DefinedName} opts.filters Array of filter paramaters\n     * @returns {Row} Excel Row with attached methods\n     */\n    filter(opts) {\n\n        let theseOpts = opts instanceof Object ? opts : {};\n        let theseFilters = opts.filters instanceof Array ? opts.filters : [];\n\n        let o = this.ws.opts.autoFilter;\n        o.startRow = this.r;\n        if (typeof theseOpts.lastRow === 'number') {\n            o.endRow = theseOpts.lastRow;\n        }\n\n        if (typeof theseOpts.firstColumn === 'number' && typeof theseOpts.lastColumn === 'number') {\n            o.startCol = theseOpts.firstColumn;\n            o.endCol = theseOpts.lastColumn;\n        }\n\n        // Programmer Note: DefinedName class is added to workbook during workbook write process for filters\n\n        this.ws.opts.autoFilter.filters = theseFilters;\n    }\n\n    /**\n     * @alias Row.hide\n     * @desc Hides the row\n     * @func Row.hide\n     * @returns {Row} Excel Row with attached methods\n     */\n    hide() {\n        this.hidden = true;\n        return this;\n    }\n\n    /**\n     * @alias Row.group\n     * @desc Hides the row\n     * @func Row.group\n     * @param {Number} level Group level of row\n     * @param {Boolean} collapsed States whether group should be collapsed or expanded by default\n     * @returns {Row} Excel Row with attached methods\n     */\n    group(level, collapsed) {\n        if (parseInt(level) === level) {\n            this.outlineLevel = level;\n        } else {\n            throw new TypeError('Row group level must be a positive integer');\n        }\n\n        if (collapsed === undefined) {\n            return this;\n        }\n\n        if (typeof collapsed === 'boolean') {\n            this.collapsed = collapsed;\n            this.hidden = collapsed;\n        } else {\n            throw new TypeError('Row group collapse flag must be a boolean');\n        }\n\n        return this;\n    }\n\n    /**\n     * @alias Row.freeze\n     * @desc Creates Worksheet panes and freezes the top pane\n     * @func Row.freeze\n     * @param {Number} jumpTo Row that the bottom pane should be scrolled to by default\n     * @returns {Row} Excel Row with attached methods\n     */\n    freeze(jumpTo) {\n        let o = this.ws.opts.sheetView.pane;\n        jumpTo = typeof jumpTo === 'number' && jumpTo > this.r ? jumpTo : this.r + 1;\n        o.state = 'frozen';\n        o.ySplit = this.r;\n        o.activePane = 'bottomRight';\n        o.xSplit === null ? \n            o.topLeftCell = utils.getExcelCellRef(jumpTo, 1) : \n            o.topLeftCell = utils.getExcelCellRef(jumpTo, utils.getExcelRowCol(o.topLeftCell).col);\n        return this;\n    }\n}\n\nmodule.exports = Row;"]}