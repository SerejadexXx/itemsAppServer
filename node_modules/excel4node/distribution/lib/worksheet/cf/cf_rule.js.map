{"version":3,"sources":["../../../../source/lib/worksheet/cf/cf_rule.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,IAAI,QAAQ,QAAR,CAAJ;AACN,IAAM,gBAAgB,QAAQ,iBAAR,CAAhB;;IAEA;;;AACF,aADE,MACF,CAAY,UAAZ,EAAwB;;;8BADtB,QACsB;;AACpB,aAAK,IAAL,GAAY,WAAW,IAAX,CADQ;AAEpB,aAAK,QAAL,GAAgB,WAAW,QAAX,CAFI;AAGpB,aAAK,OAAL,GAAe,WAAW,OAAX,CAHK;AAIpB,aAAK,KAAL,GAAa,WAAW,KAAX,CAJO;;AAMpB,YAAI,YAAY,cAAc,KAAK,IAAL,CAA1B,CANgB;;AAQpB,YAAI,CAAC,SAAD,EAAY;AACZ,kBAAM,IAAI,SAAJ,CAAc,MAAM,KAAK,IAAL,GAAY,mDAAlB,CAApB,CADY;SAAhB;;AAIA,YAAI,CAAC,UAAU,SAAV,EAAqB;AACtB,kBAAM,IAAI,SAAJ,CAAc,kCAAkC,KAAK,IAAL,GAAY,wBAA9C,CAApB,CADsB;SAA1B;;AAIA,YAAI,eAAe,EAAE,MAAF,CAAS,UAAU,aAAV,EAAyB,UAAC,IAAD,EAAO,IAAP,EAAgB;AACjE,gBAAI,EAAE,GAAF,QAAY,IAAZ,EAAkB,IAAlB,MAA4B,IAA5B,EAAkC;AAClC,qBAAK,IAAL,CAAU,IAAV,EADkC;aAAtC;AAGA,mBAAO,IAAP,CAJiE;SAAhB,EAKlD,EALgB,CAAf,CAhBgB;;AAuBpB,YAAI,aAAa,MAAb,EAAqB;AACrB,kBAAM,IAAI,SAAJ,CAAc,iEAAiE,aAAa,IAAb,CAAkB,IAAlB,CAAjE,CAApB,CADqB;SAAzB;KAvBJ;;iBADE;;oCA6BU,KAAK;AACb,gBAAI,WAAW,IAAI,GAAJ,CAAQ,QAAR,CAAX,CADS;AAEb,gBAAI,KAAK,IAAL,KAAc,SAAd,EAAyB;AACzB,yBAAS,GAAT,CAAa,MAAb,EAAqB,KAAK,IAAL,CAArB,CADyB;aAA7B;AAGA,gBAAI,KAAK,KAAL,KAAe,SAAf,EAA0B;AAC1B,yBAAS,GAAT,CAAa,OAAb,EAAsB,KAAK,KAAL,CAAtB,CAD0B;aAA9B;AAGA,gBAAI,KAAK,QAAL,KAAkB,SAAlB,EAA6B;AAC7B,yBAAS,GAAT,CAAa,UAAb,EAAyB,KAAK,QAAL,CAAzB,CAD6B;aAAjC;;AAIA,gBAAI,KAAK,OAAL,KAAiB,SAAjB,EAA4B;AAC5B,yBAAS,GAAT,CAAa,SAAb,EAAwB,IAAxB,CAA6B,KAAK,OAAL,CAA7B,CAD4B;aAAhC;;;;WAzCF;;;AAgDN,OAAO,OAAP,GAAiB,MAAjB","file":"cf_rule.js","sourcesContent":["const _ = require('lodash');\nconst CF_RULE_TYPES = require('./cf_rule_types');\n\nclass CfRule { // ยง18.3.1.10 cfRule (Conditional Formatting Rule)\n    constructor(ruleConfig) {\n        this.type = ruleConfig.type;\n        this.priority = ruleConfig.priority;\n        this.formula = ruleConfig.formula;\n        this.dxfId = ruleConfig.dxfId;\n\n        let foundType = CF_RULE_TYPES[this.type];\n\n        if (!foundType) {\n            throw new TypeError('\"' + this.type + '\" is not a valid conditional formatting rule type');\n        }\n\n        if (!foundType.supported) {\n            throw new TypeError('Conditional formatting type \"' + this.type + '\" is not yet supported');\n        }\n\n        let missingProps = _.reduce(foundType.requiredProps, (list, prop) => {\n            if (_.get(this, prop, null) === null) {\n                list.push(prop);\n            }\n            return list;\n        }, []);\n\n        if (missingProps.length) {\n            throw new TypeError('Conditional formatting rule is missing required properties: ' + missingProps.join(', '));\n        }\n    }\n\n    addToXMLele(ele) {\n        let thisRule = ele.ele('cfRule');\n        if (this.type !== undefined) {\n            thisRule.att('type', this.type);\n        }\n        if (this.dxfId !== undefined) {\n            thisRule.att('dxfId', this.dxfId);\n        }\n        if (this.priority !== undefined) {\n            thisRule.att('priority', this.priority);\n        }\n\n        if (this.formula !== undefined) {\n            thisRule.ele('formula').text(this.formula);\n        }\n    }\n}\n\n\nmodule.exports = CfRule;\n"]}