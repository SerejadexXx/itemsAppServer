{"version":3,"sources":["../../../source/lib/cell/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["const _ = require('lodash');\nconst Cell = require('./cell.js');\nconst Row = require('../row/row.js');\nconst Column = require('../column/column.js');\nconst Style = require('../style/style.js');\nconst utils = require('../utils.js');\nconst util = require('util');\n\nfunction stringSetter(val) {\n    let logger = this.ws.wb.logger;\n    let chars, chr;\n    chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;\n    chr = val.match(chars);\n    if (chr) {\n        logger.warn('Invalid Character for XML \"' + chr + '\" in string \"' + val + '\"');\n        val = val.replace(chr, '');\n    }\n\n    if (typeof(val) !== 'string') {\n        logger.warn('Value sent to String function of cells %s was not a string, it has type of %s', \n                    JSON.stringify(this.excelRefs), \n                    typeof(val));\n        val = '';\n    }\n\n    val = val.toString();\n    // Remove Control characters, they aren't understood by xmlbuilder\n    val = val.replace(/[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/, '');\n\n    if (!this.merged) {\n        this.cells.forEach((c) => {\n            c.string(this.ws.wb.getStringIndex(val));\n        });\n    } else {\n        let c = this.cells[0];\n        c.string(this.ws.wb.getStringIndex(val));\n    }\n    return this;\n}\n\nfunction complexStringSetter(val) {\n    if (!this.merged) {\n        this.cells.forEach((c) => {\n            c.string(this.ws.wb.getStringIndex(val));\n        });\n    } else {\n        let c = this.cells[0];\n        c.string(this.ws.wb.getStringIndex(val));\n    }\n    return this;\n}\n\nfunction numberSetter(val) {\n    if (val === undefined || parseFloat(val) !== val) {\n        throw new TypeError(util.format('Value sent to Number function of cells %s was not a number, it has type of %s and value of %s',\n            JSON.stringify(this.excelRefs),\n            typeof(val),\n            val\n        ));\n    }\n    val = parseFloat(val);\n\n    if (!this.merged) {\n        this.cells.forEach((c, i) => {\n            c.number(val);\n        });\n    } else {\n        var c = this.cells[0];\n        c.number(val);\n    }\n    return this;    \n}\n\nfunction booleanSetter(val) {\n    if (val === undefined || typeof (val.toString().toLowerCase() === 'true' || ((val.toString().toLowerCase() === 'false') ? false : val)) !== 'boolean') {\n        throw new TypeError(util.format('Value sent to Bool function of cells %s was not a bool, it has type of %s and value of %s',\n            JSON.stringify(this.excelRefs),\n            typeof(val),\n            val\n        ));\n    }\n    val = val.toString().toLowerCase() === 'true';\n\n    if (!this.merged) {\n        this.cells.forEach((c, i) => {\n            c.bool(val.toString());\n        });\n    } else {\n        var c = this.cells[0];\n        c.bool(val.toString());\n    }\n    return this;\n}\n\nfunction formulaSetter(val) {\n    if (typeof(val) !== 'string') {\n        throw new TypeError(util.format('Value sent to Formula function of cells %s was not a string, it has type of %s', JSON.stringify(this.excelRefs), typeof(val)));\n    }\n    if (this.merged !== true) {\n        this.cells.forEach((c, i) => {\n            c.formula(val);\n        });\n    } else {\n        var c = this.cells[0];\n        c.formula(val);\n    }\n\n    return this;\n}\n\nfunction dateSetter(val) {\n    let thisDate = new Date(val);\n    if (isNaN(thisDate.getTime())) {\n        throw new TypeError(util.format('Invalid date sent to date function of cells. %s could not be converted to a date.', val));\n    }\n    if (this.merged !== true) {\n        this.cells.forEach((c, i) => {\n            c.date(thisDate);\n        });\n    } else {\n        var c = this.cells[0];\n        c.date(thisDate);\n    }\n    return styleSetter.bind(this)({\n        numberFormat: '[$-409]' + this.ws.wb.opts.dateFormat\n    });\n}\n\nfunction styleSetter(val) {\n    let thisStyle;\n    if (val instanceof Style) {\n        thisStyle = val;\n    } else if (val instanceof Object) {\n        thisStyle = this.ws.wb.createStyle(val);\n    } else {\n        throw new TypeError(util.format('Parameter sent to Style function must be an instance of a Style or a style configuration object'));\n    }\n\n    let borderEdges = {};\n    if (thisStyle.border && thisStyle.border.outline) {\n        borderEdges.left = this.firstCol;\n        borderEdges.right = this.lastCol;\n        borderEdges.top = this.firstRow;\n        borderEdges.bottom = this.lastRow;\n    }\n\n    this.cells.forEach((c) => {\n        let thisCellStyle = thisStyle.toObject();\n        if (thisStyle.border && thisStyle.border.outline) {\n            let thisCellsBorder = {};\n            if (c.row === borderEdges.top && thisCellStyle.border.top) {\n                thisCellsBorder.top = thisCellStyle.border.top;\n            }\n            if (c.row === borderEdges.bottom && thisCellStyle.border.bottom) {\n                thisCellsBorder.bottom = thisCellStyle.border.bottom;\n            }\n            if (c.col === borderEdges.left && thisCellStyle.border.left) {\n                thisCellsBorder.left = thisCellStyle.border.left;\n            }\n            if (c.col === borderEdges.right && thisCellStyle.border.right) {\n                thisCellsBorder.right = thisCellStyle.border.right;\n            }\n            thisCellStyle.border = thisCellsBorder;\n        }\n\n        if (c.s === 0) {\n            if (thisStyle.border && thisStyle.border.outline) {\n                thisCellStyle = this.ws.wb.createStyle(thisCellStyle);\n            } else {\n                thisCellStyle = thisStyle;\n            }\n            c.style(thisCellStyle.ids.cellXfs);\n        } else {\n            let curStyle = this.ws.wb.styles[c.s];\n            let newStyleOpts = _.merge(curStyle.toObject(), thisCellStyle);\n            let mergedStyle = this.ws.wb.createStyle(newStyleOpts);\n            c.style(mergedStyle.ids.cellXfs);\n        }\n    });\n    return this;\n}\n\nfunction hyperlinkSetter(url, displayStr, tooltip) {\n    this.excelRefs.forEach((ref) => {\n        displayStr = typeof displayStr === 'string' ? displayStr : url;\n        this.ws.hyperlinkCollection.add({\n            location: url,\n            display: displayStr,\n            tooltip: tooltip,\n            ref: ref\n        });\n    });\n    stringSetter.bind(this)(displayStr);\n    return styleSetter.bind(this)({\n        font: {\n            color: 'Blue',\n            underline: true\n        }\n    });\n}\n\nfunction mergeCells(cellBlock) {\n    let excelRefs = cellBlock.excelRefs;\n    if (excelRefs instanceof Array && excelRefs.length > 0) {\n        excelRefs.sort(utils.sortCellRefs);\n\n        let cellRange = excelRefs[0] + ':' + excelRefs[excelRefs.length - 1];\n        let rangeCells = excelRefs;\n\n        let okToMerge = true;\n        cellBlock.ws.mergedCells.forEach((cr) => {\n            // Check to see if currently merged cells contain cells in new merge request\n            let curCells = utils.getAllCellsInExcelRange(cr);\n            let intersection = utils.arrayIntersectSafe(rangeCells, curCells);\n            if (intersection.length > 0) {\n                okToMerge = false;\n                cellBlock.ws.wb.logger.error(`Invalid Range for: ${cellRange}. Some cells in this range are already included in another merged cell range: ${cr}.`);\n            }\n        });\n        if (okToMerge) {\n            cellBlock.ws.mergedCells.push(cellRange);\n        }\n    } else {\n        throw new TypeError(util.format('excelRefs variable sent to mergeCells function must be an array with length > 0'));\n    }\n}\n\n/**\n * @class cellBlock\n */\nclass cellBlock {\n\n    constructor() {\n        this.ws;\n        this.cells = [];\n        this.excelRefs = [];\n        this.merged = false;\n    }\n\n    get matrix() {\n        let matrix = [];\n        let tmpObj = {};\n        this.cells.forEach((c) => {\n            if (!tmpObj[c.row]) {\n                tmpObj[c.row] = [];\n            }\n            tmpObj[c.row].push(c);\n        });\n        let rows = Object.keys(tmpObj);\n        rows.forEach((r) => {\n            tmpObj[r].sort((a, b) => {\n                return a.col - b.col;\n            });\n            matrix.push(tmpObj[r]);\n        });\n        return matrix;\n    }\n\n    get firstRow() {\n        let firstRow;\n        this.cells.forEach((c) => {\n            if (c.row < firstRow || firstRow === undefined) {\n                firstRow = c.row;\n            }\n        });\n        return firstRow;\n    }\n\n    get lastRow() {\n        let lastRow;\n        this.cells.forEach((c) => {\n            if (c.row > lastRow || lastRow === undefined) {\n                lastRow = c.row;\n            }\n        });\n        return lastRow;\n    }\n\n    get firstCol() {\n        let firstCol;\n        this.cells.forEach((c) => {\n            if (c.col < firstCol || firstCol === undefined) {\n                firstCol = c.col;\n            }\n        });\n        return firstCol;\n    }\n\n    get lastCol() {\n        let lastCol;\n        this.cells.forEach((c) => {\n            if (c.col > lastCol || lastCol === undefined) {\n                lastCol = c.col;\n            }\n        });\n        return lastCol;\n    }\n}\n\n/**\n * Module repesenting a Cell Accessor\n * @alias Worksheet.cell\n * @namespace\n * @func Worksheet.cell\n * @desc Access a range of cells in order to manipulate values\n * @param {Number} row1 Row of top left cell\n * @param {Number} col1 Column of top left cell\n * @param {Number} row2 Row of bottom right cell (optional)\n * @param {Number} col2 Column of bottom right cell (optional)\n * @param {Boolean} isMerged Merged the cell range into a single cell\n * @returns {cellBlock}\n */\nfunction cellAccessor(row1, col1, row2, col2, isMerged) {\n    let theseCells = new cellBlock();\n    theseCells.ws = this;\n\n    row2 = row2 ? row2 : row1;\n    col2 = col2 ? col2 : col1;\n\n    if (row2 > this.lastUsedRow) {\n        this.lastUsedRow = row2;\n    }\n\n    if (col2 > this.lastUsedCol) {\n        this.lastUsedCol = col2;\n    }\n\n    for (let r = row1; r <= row2; r++) {\n        for (let c = col1; c <= col2; c++) {\n            let ref = `${utils.getExcelAlpha(c)}${r}`;\n            if (!this.cells[ref]) {\n                this.cells[ref] = new Cell(r, c);\n            }\n            if (!this.rows[r]) {\n                this.rows[r] = new Row(r, this);\n            }\n            if (this.rows[r].cellRefs.indexOf(ref) < 0) {\n                this.rows[r].cellRefs.push(ref);\n            }\n\n            theseCells.cells.push(this.cells[ref]);\n            theseCells.excelRefs.push(ref);\n        }\n    }\n    if (isMerged) {\n        theseCells.merged = true;\n        mergeCells(theseCells);\n    }\n\n    return theseCells;\n}\n\n/**\n * @alias cellBlock.string\n * @func cellBlock.string\n * @param {String} val Value of String\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.string = function (val) {\n    if (val instanceof Array) {\n        return complexStringSetter.bind(this)(val);\n    } else {\n        return stringSetter.bind(this)(val);\n    }\n};\n\n/**\n * @alias cellBlock.style\n * @func cellBlock.style\n * @param {Object} style One of a Style instance or an object with Style parameters\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.style = styleSetter;\n\n/**\n * @alias cellBlock.number\n * @func cellBlock.number\n * @param {Number} val Value of Number\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.number = numberSetter;\n\n/**\n * @alias cellBlock.bool\n * @func cellBlock.bool\n * @param {Boolean} val Value of Boolean\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.bool = booleanSetter;\n\n/**\n * @alias cellBlock.formula\n * @func cellBlock.formula\n * @param {String} val Excel style formula as string\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.formula = formulaSetter;\n\n/**\n * @alias cellBlock.date\n * @func cellBlock.date\n * @param {Date} val Value of Date\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.date = dateSetter;\n\n/**\n * @alias cellBlock.link\n * @func cellBlock.link\n * @param {String} url Value of Hyperlink URL\n * @param {String} displayStr Value of String representation of URL\n * @param {String} tooltip Value of text to display as hover\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.link = hyperlinkSetter;\n\nmodule.exports = cellAccessor;"]}