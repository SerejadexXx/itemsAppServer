{"version":3,"sources":["../../../source/lib/column/column.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,QAAQ,QAAQ,aAAR,CAAR;AACN,IAAM,IAAI,QAAQ,QAAR,CAAJ;;IAGA;;;;;;;;;;;;;;;;AAeF,aAfE,MAeF,CAAY,GAAZ,EAAiB,EAAjB,EAAqB;8BAfnB,QAemB;;AACjB,aAAK,EAAL,GAAU,EAAV,CADiB;AAEjB,aAAK,SAAL,GAAiB,IAAjB,CAFiB;AAGjB,aAAK,WAAL,GAAmB,IAAnB,CAHiB;AAIjB,aAAK,MAAL,GAAc,IAAd,CAJiB;AAKjB,aAAK,GAAL,GAAW,GAAX,CALiB;AAMjB,aAAK,GAAL,GAAW,GAAX,CANiB;AAOjB,aAAK,YAAL,GAAoB,IAApB,CAPiB;AAQjB,aAAK,KAAL,GAAa,IAAb,CARiB;AASjB,aAAK,QAAL,GAAgB,IAAhB,CATiB;KAArB;;iBAfE;;;;;;;;;;;iCAgDO,GAAG;AACR,gBAAI,SAAS,CAAT,MAAgB,CAAhB,EAAmB;AACnB,qBAAK,QAAL,GAAgB,CAAhB,CADmB;AAEnB,qBAAK,WAAL,GAAmB,IAAnB,CAFmB;aAAvB,MAGO;AACH,sBAAM,IAAI,SAAJ,CAAc,yCAAd,CAAN,CADG;aAHP;AAMA,mBAAO,IAAP,CAPQ;;;;;;;;;;;;+BAgBL;AACH,iBAAK,MAAL,GAAc,IAAd,CADG;AAEH,mBAAO,IAAP,CAFG;;;;;;;;;;;;;;8BAaD,OAAO,WAAW;AACpB,gBAAI,SAAS,KAAT,MAAoB,KAApB,EAA2B;AAC3B,qBAAK,YAAL,GAAoB,KAApB,CAD2B;aAA/B,MAEO;AACH,sBAAM,IAAI,SAAJ,CAAc,+CAAd,CAAN,CADG;aAFP;;AAMA,gBAAI,cAAc,SAAd,EAAyB;AACzB,uBAAO,IAAP,CADyB;aAA7B;;AAIA,gBAAI,OAAO,SAAP,KAAqB,SAArB,EAAgC;AAChC,qBAAK,SAAL,GAAiB,SAAjB,CADgC;AAEhC,qBAAK,MAAL,GAAc,SAAd,CAFgC;aAApC,MAGO;AACH,sBAAM,IAAI,SAAJ,CAAc,8CAAd,CAAN,CADG;aAHP;;AAOA,mBAAO,IAAP,CAlBoB;;;;;;;;;;;;;+BA4BjB,QAAQ;AACX,gBAAI,IAAI,KAAK,EAAL,CAAQ,IAAR,CAAa,SAAb,CAAuB,IAAvB,CADG;AAEX,qBAAS,OAAO,MAAP,KAAkB,QAAlB,IAA8B,SAAS,KAAK,GAAL,GAAW,MAAlD,GAA2D,KAAK,GAAL,GAAW,CAAX,CAFzD;AAGX,cAAE,KAAF,GAAU,QAAV,CAHW;AAIX,cAAE,MAAF,GAAW,KAAK,GAAL,CAJA;AAKX,cAAE,UAAF,GAAe,aAAf,CALW;AAMX,cAAE,MAAF,KAAa,IAAb,GACI,EAAE,WAAF,GAAgB,MAAM,eAAN,CAAsB,CAAtB,EAAyB,MAAzB,CAAhB,GACA,EAAE,WAAF,GAAgB,MAAM,eAAN,CAAsB,MAAM,cAAN,CAAqB,EAAE,WAAF,CAArB,CAAoC,GAApC,EAAyC,MAA/D,CAAhB,CARO;AASX,mBAAO,IAAP,CATW;;;;4BA9EH;AACR,mBAAO,KAAK,QAAL,CADC;;0BAIF,GAAG;AACT,gBAAI,SAAS,CAAT,MAAgB,CAAhB,EAAmB;AACnB,qBAAK,QAAL,GAAgB,CAAhB,CADmB;AAEnB,qBAAK,WAAL,GAAmB,IAAnB,CAFmB;aAAvB,MAGO;AACH,sBAAM,IAAI,SAAJ,CAAc,yCAAd,CAAN,CADG;aAHP;AAMA,mBAAO,KAAK,QAAL,CAPE;;;;WA/BX;;;AAsHN,OAAO,OAAP,GAAiB,MAAjB","file":"column.js","sourcesContent":["const utils = require('../utils.js');\nconst _ = require('lodash');\n\n\nclass Column {\n    /**\n     * Element representing an Excel Column\n     * @param {Number} col Column of cell\n     * @param {Worksheet} Worksheet that contains column\n     * @property {Worksheet} ws Worksheet that contains the specified Column\n     * @property {Boolean} collapsed States whether the column is collapsed if part of a group\n     * @property {Boolean} customWidth States whether or not the column as a width that is not default\n     * @property {Boolean} hidden States whether or not the specified column is hiddent\n     * @property {Number} max The greatest column if part of a range\n     * @property {Number} min The least column if part of a range\n     * @property {Number} outlineLevel The grouping leve of the Column\n     * @property {Number} style ID of style\n     * @property {Number} width Width of the Column\n     */\n    constructor(col, ws) {\n        this.ws = ws;\n        this.collapsed = null;\n        this.customWidth = null;\n        this.hidden = null;\n        this.max = col;\n        this.min = col;\n        this.outlineLevel = null;\n        this.style = null;\n        this.colWidth = null;\n    }\n\n    get width() {\n        return this.colWidth;\n    }\n\n    set width(w) {\n        if (parseInt(w) === w) {\n            this.colWidth = w;\n            this.customWidth = true;\n        } else {\n            throw new TypeError('Column width must be a positive integer');\n        }\n        return this.colWidth;\n    }\n\n    /**\n     * @alias Column.setWidth\n     * @desc Sets teh width of a column\n     * @func Column.setWidth\n     * @param {Number} val New Width of column\n     * @returns {Column} Excel Column with attached methods\n     */\n    setWidth(w) {\n        if (parseInt(w) === w) {\n            this.colWidth = w;\n            this.customWidth = true;\n        } else {\n            throw new TypeError('Column width must be a positive integer');\n        }\n        return this;\n    }\n\n    /**\n     * @alias Column.hide\n     * @desc Sets a Column to be hidden\n     * @func Column.hide\n     * @returns {Column} Excel Column with attached methods\n     */\n    hide() {\n        this.hidden = true;\n        return this;\n    }\n\n    /**\n     * @alias Column.group\n     * @desc Adds column to the specified group\n     * @func Column.group\n     * @param {Number} level Level of excel grouping\n     * @param {Boolean} collapsed States wheter column grouping level should be collapsed by default\n     * @returns {Column} Excel Column with attached methods\n     */\n    group(level, collapsed) {\n        if (parseInt(level) === level) {\n            this.outlineLevel = level;\n        } else {\n            throw new TypeError('Column group level must be a positive integer');\n        }\n\n        if (collapsed === undefined) {\n            return this;\n        }\n\n        if (typeof collapsed === 'boolean') {\n            this.collapsed = collapsed;\n            this.hidden = collapsed;\n        } else {\n            throw new TypeError('Column group collapse flag must be a boolean');\n        }\n\n        return this; \n    }\n\n    /**\n     * @alias Column.freeze\n     * @desc Creates an Excel pane at the specificed column and Freezes that column from scolling\n     * @func Column.freeze\n     * @param {Number} jumptTo Specifies the column that the active pane will be scrolled to by default\n     * @returns {Column} Excel Column with attached methods\n     */\n    freeze(jumpTo) {\n        let o = this.ws.opts.sheetView.pane;\n        jumpTo = typeof jumpTo === 'number' && jumpTo > this.min ? jumpTo : this.min + 1;\n        o.state = 'frozen';\n        o.xSplit = this.min;\n        o.activePane = 'bottomRight';\n        o.ySplit === null ? \n            o.topLeftCell = utils.getExcelCellRef(1, jumpTo) : \n            o.topLeftCell = utils.getExcelCellRef(utils.getExcelRowCol(o.topLeftCell).row, jumpTo);\n        return this;\n    }\n}\n\nmodule.exports = Column;"]}