{"version":3,"sources":["../../source/lib/utils.js"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["let types = require('./types/index.js');\n\nlet _bitXOR = (a, b) => {\n    let maxLength = a.length > b.length ? a.length : b.length;\n\n    let padString = '';\n    for (let i = 0; i < maxLength; i++) {\n        padString += '0';\n    }\n\n    a = String(padString + a).substr(-maxLength);\n    b = String(padString + b).substr(-maxLength);\n\n    let response = '';\n    for (let i = 0; i < a.length; i++) {\n        response += a[i] === b[i] ? 0 : 1;\n    }\n    return response;\n};\n\nlet generateRId = () => {\n    let text = 'R';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 16; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n};\n\nlet _rotateBinary = (bin) => {\n    return bin.substr(1, bin.length - 1) + bin.substr(0, 1);\n};\n\nlet _getHashForChar = (char, hash) => {    \n    hash = hash ? hash : '0000';\n    let charCode = char.charCodeAt(0);\n    let hashBin = parseInt(hash, 16).toString(2);\n    let charBin = parseInt(charCode, 10).toString(2);\n    hashBin = String('000000000000000' + hashBin).substr(-15);\n    charBin = String('000000000000000' + charBin).substr(-15);\n    let nextHash = _bitXOR(hashBin, charBin);\n    nextHash = _rotateBinary(nextHash);\n    nextHash = parseInt(nextHash, 2).toString(16);\n\n    return nextHash;\n};\n\n//  http://www.openoffice.org/sc/excelfileformat.pdf section 4.18.4\nlet getHashOfPassword = (str) => {\n    let curHash = '0000';\n    for (let i = str.length - 1; i >= 0; i--) {\n        curHash = _getHashForChar(str[i], curHash);\n    }\n    let curHashBin = parseInt(curHash, 16).toString(2);\n    let charCountBin = parseInt(str.length, 10).toString(2);\n    let saltBin = parseInt('CE4B', 16).toString(2);\n\n    let firstXOR = _bitXOR(curHashBin, charCountBin);\n    let finalHashBin = _bitXOR(firstXOR, saltBin);\n    let finalHash = String('0000' + parseInt(finalHashBin, 2).toString(16).toUpperCase()).slice(-4);\n\n    return finalHash;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B\n * getExcelAlpha(2);\n */\nlet getExcelAlpha = (colNum) => {\n    let remaining = colNum;\n    let aCharCode = 65;\n    let columnName = '';\n    while (remaining > 0) {\n        let mod = (remaining - 1) % 26;\n        columnName = String.fromCharCode(aCharCode + mod) + columnName;\n        remaining = (remaining - 1 - mod) / 26;\n    } \n    return columnName;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} rowNum Row number that is to be transalated\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B1\n * getExcelCellRef(1, 2);\n */\nlet getExcelCellRef = (rowNum, colNum) => {\n    let remaining = colNum;\n    let aCharCode = 65;\n    let columnName = '';\n    while (remaining > 0) {\n        let mod = (remaining - 1) % 26;\n        columnName = String.fromCharCode(aCharCode + mod) + columnName;\n        remaining = (remaining - 1 - mod) / 26;\n    } \n    return columnName + rowNum;\n};\n\n/**\n * Translates a Excel cell represenation into row and column numerical equivalents \n * @function getExcelRowCol\n * @param {String} str Excel cell representation\n * @returns {Object} Object keyed with row and col\n * @example\n * // returns {row: 2, col: 3}\n * getExcelRowCol('C2')\n */\nlet getExcelRowCol = (str) => {\n    let numeric = str.split(/\\D/).filter(function (el) {\n        return el !== '';\n    })[0];\n    let alpha = str.split(/\\d/).filter(function (el) {\n        return el !== '';\n    })[0];\n    let row = parseInt(numeric, 10);\n    let col = alpha.toUpperCase().split('').reduce(function (a, b, index, arr) {\n        return a + (b.charCodeAt(0) - 64) * Math.pow(26, arr.length - index - 1);\n    }, 0);\n    return { row: row, col: col };\n};\n\n/**\n * Translates a date into Excel timestamp\n * @function getExcelTS\n * @param {Date} date Date to translate\n * @returns {Number} Excel timestamp\n * @example\n * // returns 29810.958333333332\n * getExcelTS(new Date('08/13/1981'));\n */\nlet getExcelTS = (date) => {\n    let thisDt = new Date(date);\n    let epoch = new Date(1899, 11, 31);\n    let dt = thisDt.setDate(thisDt.getDate() + 1);\n    let ts = (dt - epoch) / (1000 * 60 * 60 * 24);\n    return ts;\n};\n\nlet sortCellRefs = (a, b) => {\n    let aAtt = getExcelRowCol(a);\n    let bAtt = getExcelRowCol(b);\n    if (aAtt.col === bAtt.col) {\n        return aAtt.row - bAtt.row;\n    } else {\n        return aAtt.col - bAtt.col;\n    }\n};\n\nlet arrayIntersectSafe = (a, b) => {\n\n    if (a instanceof Array && b instanceof Array) {\n        var ai = 0, bi = 0;\n        var result = new Array();\n\n        while (ai < a.length && bi < b.length) {\n            if (a[ai] < b[bi]) {\n                ai++;\n            } else if (a[ai] > b[bi]) {\n                bi++;\n            } else {\n                result.push(a[ai]);\n                ai++;\n                bi++;\n            }\n        }\n        return result;\n    } else {\n        throw new TypeError('Both variables sent to arrayIntersectSafe must be arrays');\n    }\n};\n\nlet getAllCellsInExcelRange = (range) => {\n    var cells = range.split(':');\n    var cell1props = getExcelRowCol(cells[0]);\n    var cell2props = getExcelRowCol(cells[1]);\n    return getAllCellsInNumericRange(cell1props.row, cell1props.col, cell2props.row, cell2props.col);\n};\n\nlet getAllCellsInNumericRange = (row1, col1, row2, col2) => {\n    var response = [];\n    row2 = row2 ? row2 : row1;\n    col2 = col2 ? col2 : col1;\n    for (var i = row1; i <= row2; i++) {\n        for (var j = col1; j <= col2; j++) {\n            response.push(getExcelAlpha(j) + i);\n        }\n    }\n    return response.sort(sortCellRefs);\n};\n\nlet boolToInt = (bool) => {\n    if (bool === true) {\n        return 1;\n    }\n    if (bool === false) {\n        return 0;\n    }\n    if (parseInt(bool) === 1) {\n        return 1;\n    }\n    if (parseInt(bool) === 0) {\n        return 0;\n    }\n    throw new TypeError('Value sent to boolToInt must be true, false, 1 or 0');\n};\n\n/*\n * Helper Functions\n */\n\nmodule.exports = {\n    generateRId,\n    getHashOfPassword,\n    getExcelAlpha,\n    getExcelCellRef,\n    getExcelRowCol,\n    getExcelTS,\n    sortCellRefs,\n    arrayIntersectSafe,\n    getAllCellsInExcelRange,\n    getAllCellsInNumericRange,\n    boolToInt\n};"]}