{"version":3,"sources":["../../../source/lib/drawing/drawing.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,WAAW,QAAQ,wBAAR,CAAX;AACN,IAAM,QAAQ,QAAQ,qBAAR,CAAR;AACN,IAAM,MAAM,QAAQ,mBAAR,CAAN;;IAEA;;;;;;;;;;;AAUF,aAVE,OAUF,GAAc;8BAVZ,SAUY;;AACV,aAAK,WAAL,GAAmB,IAAnB,CADU;AAEV,aAAK,WAAL,GAAmB,IAAnB,CAFU;AAGV,aAAK,SAAL,GAAiB,IAAjB,CAHU;AAIV,aAAK,OAAL,GAAe,IAAf,CAJU;AAKV,aAAK,SAAL,GAAiB,IAAjB,CALU;KAAd;;iBAVE;;;;;;;;;;;;;;;;;;;;;+BA2EK,MAAM,MAAM,IAAI;AACnB,gBAAI,SAAS,eAAT,EAA0B;AAC1B,oBAAI,SAAS,SAAT,IAAsB,OAAO,SAAP,EAAkB;AACxC,0BAAM,IAAI,SAAJ,CAAc,kDAAd,CAAN,CADwC;iBAA5C;AAGA,qBAAK,MAAL,GAAc,SAAd,CAJ0B;aAA9B;AAMA,iBAAK,UAAL,GAAkB,IAAlB,CAPmB;AAQnB,iBAAK,UAAL,GAAkB,IAAlB,CARmB;AASnB,iBAAK,QAAL,GAAgB,EAAhB,CATmB;AAUnB,mBAAO,IAAP,CAVmB;;;;;;;;;;;;;iCAoBd,IAAI,IAAI;AACb,iBAAK,UAAL,GAAkB,gBAAlB,CADa;AAEb,gBAAI,SAAS,IAAI,GAAJ,CAAQ,EAAR,CAAT,CAFS;AAGb,gBAAI,SAAS,IAAI,GAAJ,CAAQ,EAAR,CAAT,CAHS;AAIb,iBAAK,SAAL,GAAiB,IAAI,KAAJ,CAAU,OAAO,KAAP,EAAc,OAAO,KAAP,CAAzC,CAJa;;;;4BA7EA;AACb,mBAAO,KAAK,WAAL,CADM;;0BAGF,MAAM;AACjB,gBAAI,QAAQ,CAAC,gBAAD,EAAmB,eAAnB,EAAoC,eAApC,CAAR,CADa;AAEjB,gBAAI,MAAM,OAAN,CAAc,IAAd,IAAsB,CAAtB,EAAyB;AACzB,sBAAM,IAAI,SAAJ,CAAc,+DAA+D,MAAM,IAAN,CAAW,IAAX,CAA/D,CAApB,CADyB;aAA7B;AAGA,iBAAK,WAAL,GAAmB,IAAnB,CALiB;;;;4BAQR;AACT,mBAAO,KAAK,OAAL,CADE;;0BAGF,KAAK;AACZ,gBAAI,QAAQ,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,CAAR,CADQ;AAEZ,gBAAI,MAAM,OAAN,CAAc,GAAd,IAAqB,CAArB,EAAwB;AACxB,sBAAM,IAAI,SAAJ,CAAc,sDAAsD,MAAM,IAAN,CAAW,IAAX,CAAtD,CAApB,CADwB;aAA5B;AAGA,iBAAK,OAAL,GAAe,GAAf,CALY;;;;4BAQC;AACb,mBAAO,KAAK,WAAL,CADM;;0BAGF,KAAK;AAChB,gBAAI,QAAQ,SAAR,IAAqB,eAAe,MAAf,EAAuB;AAC5C,qBAAK,WAAL,GAAmB,IAAI,QAAJ,CAAa,IAAI,GAAJ,GAAU,CAAV,EAAa,IAAI,MAAJ,EAAY,IAAI,GAAJ,GAAU,CAAV,EAAa,IAAI,MAAJ,CAAtE,CAD4C;aAAhD;;;;4BAKW;AACX,mBAAO,KAAK,SAAL,CADI;;0BAGF,KAAK;AACd,gBAAI,QAAQ,SAAR,IAAqB,eAAe,MAAf,EAAuB;AAC5C,qBAAK,SAAL,GAAiB,IAAI,QAAJ,CAAa,IAAI,GAAJ,GAAU,CAAV,EAAa,IAAI,MAAJ,EAAY,IAAI,GAAJ,GAAU,CAAV,EAAa,IAAI,MAAJ,CAApE,CAD4C;aAAhD;;;;WArDF;;;AAuGN,OAAO,OAAP,GAAiB,OAAjB","file":"drawing.js","sourcesContent":["const CTMarker = require('../classes/ctMarker.js');\nconst Point = require('../classes/point.js');\nconst EMU = require('../classes/emu.js');\n\nclass Drawing {\n    /**\n     * Element representing an Excel Drawing superclass\n     * @property {String} anchorType Proprty for type of anchor. One of 'absoluteAnchor', 'oneCellAnchor', 'twoCellAnchor'\n     * @property {CTMarker} anchorFrom Property for the top left corner position of drawing\n     * @property {CTMarker} anchorTo Property for the bottom left corner position of drawing\n     * @property {String} editAs Property that states how to interact with the Drawing in Excel. One of 'absolute', 'oneCell', 'twoCell'\n     * @property {Point} _position Internal property for position on Excel Worksheet when drawing type is absoluteAnchor\n     * @returns {Drawing} Excel Drawing \n     */\n    constructor() {\n        this._anchorType = null;\n        this._anchorFrom = null;\n        this._anchorTo = null;\n        this._editAs = null;\n        this._position = null;\n    }\n\n    get anchorType() {\n        return this._anchorType;\n    }\n    set anchorType(type) {\n        let types = ['absoluteAnchor', 'oneCellAnchor', 'twoCellAnchor'];\n        if (types.indexOf(type) < 0) {\n            throw new TypeError('Invalid option for anchor type. anchorType must be one of ' + types.join(', '));\n        }\n        this._anchorType = type;\n    }\n\n    get editAs() {\n        return this._editAs;\n    }\n    set editAs(val) {\n        let types = ['absolute', 'oneCell', 'twoCell'];\n        if (types.indexOf(val) < 0) {\n            throw new TypeError('Invalid option for editAs. editAs must be one of ' + types.join(', '));\n        }\n        this._editAs = val;\n    }\n\n    get anchorFrom() {\n        return this._anchorFrom;\n    }\n    set anchorFrom(obj) {\n        if (obj !== undefined && obj instanceof Object) {\n            this._anchorFrom = new CTMarker(obj.col - 1, obj.colOff, obj.row - 1, obj.rowOff);\n        }\n    }\n\n    get anchorTo() {\n        return this._anchorTo;\n    }\n    set anchorTo(obj) {\n        if (obj !== undefined && obj instanceof Object) {\n            this._anchorTo = new CTMarker(obj.col - 1, obj.colOff, obj.row - 1, obj.rowOff);\n        }\n    }\n\n    /**\n     * @alias Drawing.achor\n     * @desc Sets the postion and anchor properties of the Drawing\n     * @func Drawing.achor\n     * @param {String} type Anchor type of drawing\n     * @param {Object} from Properties for achorFrom property\n     * @param {Number} from.col Left edge of drawing will align with left edge of this column\n     * @param {String} from.colOff Offset. Drawing will be shifted to the right the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n     * @param {Number} from.row Top edge of drawing will align with top edge of this row\n     * @param {String} from.rowOff Offset. Drawing will be shifted down the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n     * @param {Object} to Properties for anchorTo property\n     * @param {Number} to.col Left edge of drawing will align with left edge of this column\n     * @param {String} to.colOff Offset. Drawing will be shifted to the right the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n     * @param {Number} to.row Top edge of drawing will align with top edge of this row\n     * @param {String} to.rowOff Offset. Drawing will be shifted down the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n     * @returns {Drawing} Excel Drawing with attached methods\n     */\n    anchor(type, from, to) {\n        if (type === 'twoCellAnchor') {\n            if (from === undefined || to === undefined) {\n                throw new TypeError('twoCellAnchor requires both from and two markers');\n            }\n            this.editAs = 'oneCell';\n        }\n        this.anchorType = type;\n        this.anchorFrom = from;\n        this.anchorTo = to;\n        return this;\n    }\n\n    /**\n     * @alias Drawing.position\n     * @desc The position of the top left corner of the image on the Worksheet\n     * @func Drawing.position\n     * @param {ST_PositiveUniversalMeasure} cx Postion from left of Worksheet edge\n     * @param {ST_PositiveUniversalMeasure} cy Postion from top of Worksheet edge\n     */\n    position(cx, cy) {\n        this.anchorType = 'absoluteAnchor';\n        let thisCx = new EMU(cx);\n        let thisCy = new EMU(cy);\n        this._position = new Point(thisCx.value, thisCy.value);\n    }\n}\n\nmodule.exports = Drawing;"]}